# -*- coding: utf-8 -*-
"""Open-Domain-QA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R3QQGpgtPI2h2LVl84W-_aSpHBWnZ_L0

# Introduction
The initial Closed-Domain-QA script which we had used was not well written, and the library used (cdqa pipeline), is now deprecated. This time, we use the Haystack libarary instead to create an Open Domain QA system
"""

import os
from IPython.display import clear_output


!pip install farm-haystack
!pip install urllib3 == 1.25.4

clear_output()

!apt install xpdf
!pip install pdftotext


clear_output()

"""# Method
- I have used a Dense-passage-retrieval System as a retriever for QA, and and existing BERT Models that function as document embedders and query embedders

- We did *not* initially train the model at all, but I'm researching into ways to be able to train it on several similar datasets to improve the performance. 

- Colab is not the way to go IMO for any decent code, but I'm constrained by the lack of a GPU on my system for speed. 

- I will be making a much smaller version of this as a python project to account for this
"""


# full directory:
base_dir = '/content/drive/MyDrive/TEXTBOOKS'


textbooks = [subj for subj in os.listdir(base_dir)
             if os.path.isfile(
    os.path.join(base_dir, subj))]
print(textbooks)


converter = [PDFToTextConverter(remove_numeric_tables=False)
             for i in textbooks]
doc = converter[1].convert(file_path=os.path.join(base_dir, textbooks[1]))

processor = PreProcessor(
    clean_empty_lines=True,
    clean_whitespace=True,
    clean_header_footer=True,
    split_by='passage',
    split_overlap=10,
    split_respect_sentence_boundary=False
)

doc_store = InMemoryDocumentStore(similarity="dot_product")

doc_p = processor.process(doc)
doc_store.write_documents(doc_p)

retriever = DensePassageRetriever(
    document_store=doc_store,
    query_embedding_model="facebook/dpr-question_encoder-single-nq-base",
    passage_embedding_model="facebook/dpr-ctx_encoder-single-nq-base"
)

doc_store.update_embeddings(retriever)

# prefer speed over acc, people are impatient
reader = FARMReader(
    model_name_or_path="deepset/minilm-uncased-squad2", use_gpu=True)

pipe = ExtractiveQAPipeline(reader, retriever)

prediction = pipe.run(query="What is a parser?",
                      top_k_retriever=5, top_k_reader=5)

#print_answers(prediction, details="minimal")
print(prediction[
    'answers'
][0]['answer'])
